#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Nexis is an innovative CLI-based tool designed to address the challenges faced by HPC and AI engineers. 
By leveraging the power of AI, Nexis transforms the traditional CLI experience into an intelligent and interactive support system that provides real-time assistance to users.
This script installs the required dependencies and copies the main script to /usr/local/bin so that it can be run from anywhere in the terminal.
"""
#Author : Vinil Vadakkepurakkal
#Date   : 2024-08-07


import os
import json
import openai
import argparse

def load_openai_config():
    """Load OpenAI configuration from a JSON file in the user's home directory."""
    home_directory = os.path.expanduser("~")
    config_path = os.path.join(home_directory, '.openai_config.json')
    
    try:
        with open(config_path, 'r') as file:
            config = json.load(file)
        return config
    except FileNotFoundError:
        raise FileNotFoundError(f"Configuration file not found at {config_path}")
    except json.JSONDecodeError:
        raise ValueError(f"Error decoding JSON in configuration file at {config_path}")

def generate_nexis_response(topic, query, config):
    prompt = f"Generate nexis response on the topic of {topic}.\nQuery: {query}\nResponse:"
    try:
        openai.api_type = "azure"
        openai.api_base = config["api_base"]
        openai.api_version = config["api_version"]
        openai.api_key = config["api_key"]
        deployment_name = config["deployment_name"]

        response = openai.Completion.create(
            engine=deployment_name,
            prompt=prompt,
            max_tokens=500,
            n=1,  # Ensure only one response is generated
            stop=None,
            temperature=0.7
        )
        # Capture and return the full response
        full_response = response.choices[0].text.strip()
        return full_response
    except Exception as e:
        return f"An error occurred: {e}"

def main():
    # Print AI-based response note and warning
   

    parser = argparse.ArgumentParser(description='Generate Nexis response using Azure OpenAI Service')
    parser.add_argument('topic', type=str, choices=['ib', 'gpu', 'slurm', 'openpbs', 'mpi', 'scripts', 'logs', 'vmsku', 'error', 'others', 'linux', 'ai'],
                        help='Nexis response')
    parser.add_argument('query', type=str, help='The query to generate a response for')
    args = parser.parse_args()

    topic = args.topic
    query = args.query

    try:
        config = load_openai_config()
    except (FileNotFoundError, ValueError) as e:
        print(f"Error loading OpenAI config: {e}")
        sys.exit(1)

    response = generate_nexis_response(topic, query, config)
    print(f"Response:\n{response}")

if __name__ == "__main__":
    print("------------------------------------------------------------------------------------------------------------------------")
    print(" ") 
    print("WARNING: This response is generated by Nexis, an AI-based model. Please verify the information provided and use it as a guideline. AI-generated responses may not always be fully accurate or complete.")
    print(" ") 
    print("------------------------------------------------------------------------------------------------------------------------")
    print(" ") 
    main()
    