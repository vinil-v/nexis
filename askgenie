#!/usr/bin/env python3.8

import openai
import argparse
import json
import os

def load_openai_config():
    """Load OpenAI configuration from a JSON file in the user's home directory."""
    home_directory = os.path.expanduser("~")
    config_path = os.path.join(home_directory, '.openai_config.json')
    
    try:
        with open(config_path, 'r') as file:
            config = json.load(file)
        return config
    except FileNotFoundError:
        raise FileNotFoundError(f"Configuration file not found at {config_path}")
    except json.JSONDecodeError:
        raise ValueError(f"Error decoding JSON in configuration file at {config_path}")

def generate_hpc_utility_response(topic, query, config):
    prompt = f"Generate utilities for HPC diagnostics on the topic of {topic}.\nQuery: {query}\nResponse:"
    try:
        openai.api_type = "azure"
        openai.api_base = config["api_base"]
        openai.api_version = config["api_version"]
        openai.api_key = config["api_key"]
        deployment_name = config["deployment_name"]
        
        response = openai.Completion.create(
            engine=deployment_name,
            prompt=prompt,
            max_tokens=500,
            n=1,  # Ensure only one response is generated
            stop=None,
            temperature=0.7
        )
        # Capture and return the full response
        full_response = response.choices[0].text.strip()
        return full_response
    except Exception as e:
        return f"An error occurred: {e}"

def main():
    parser = argparse.ArgumentParser(description='Generate HPC diagnostic utilities using Azure OpenAI Service')
    parser.add_argument('topic', type=str, choices=['ib', 'gpu', 'slurm', 'openpbs', 'mpi', 'scripts', 'logs', 'vmsku', 'error', 'others', 'linux', 'ai'],
                        help='The HPC topic to generate utilities for')
    parser.add_argument('query', type=str, help='The query to generate a response for')
    args = parser.parse_args()

    topic = args.topic
    query = args.query
    
    # Load configuration
    config = load_openai_config()
    
    response = generate_hpc_utility_response(topic, query, config)
    print(f"Response:\n{response}")

if __name__ == "__main__":
    main()
